name: 🚀 NuGet Package CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'EasyCodeBuilder/EasyCodeBuilder.csproj'
  workflow_dispatch:  # 允许手动触发

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'EasyCodeBuilder/EasyCodeBuilder.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  check-version-changed:
    name: 🤓 Check Version Changed
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: 🤓 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 获取最近两次提交以便比较

      - name: 🔍 Check if Version changed
        id: check
        run: |
          # 获取当前提交的 Version 值
          CURRENT_VERSION=$(grep -oP '<Version>\K[^<]+' ${{ env.PROJECT_PATH }})
          
          # 如果是第一次提交或者是手动触发，则认为版本已变更
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD~1:${{ env.PROJECT_PATH }} | grep -oP '<Version>\K[^<]+' || echo "")
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "✅ Version changed: $PREVIOUS_VERSION -> $CURRENT_VERSION"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "ℹ️ Version unchanged: $CURRENT_VERSION"
            fi
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ First commit or manual trigger, proceeding with build"
          fi

      - name: 🏷️ Extract version number
        id: extract
        run: |
          VERSION=$(grep -oP '<Version>\K[^<]+' ${{ env.PROJECT_PATH }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Extracted version: $VERSION"
      
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: check-version-changed
    if: needs.check-version-changed.outputs.version_changed == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 🔨 Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: 🧪 Run tests (if exists)
      run: |
        if [ -d "tests" ] || [ -d "test" ] || [ -d "Tests" ] || [ -d "Test" ]; then
          echo "Running tests..."
          dotnet test --configuration Release --no-build --verbosity normal
        else
          echo "No test projects found, skipping tests"
        fi
      
  publish:
    name: 📦 Publish to NuGet
    needs: [check-version-changed, build-and-test]
    runs-on: ubuntu-latest
    if: needs.check-version-changed.outputs.version_changed == 'true'
    permissions:
      contents: write  # 需要写权限来创建 tag 和 release
    
    steps:
    - name:  Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🏷️ Get version from extraction
      id: version
      run: |
        VERSION="${{ needs.check-version-changed.outputs.version }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Package version: $VERSION"
        
    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 🔨 Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
      
    - name: 📦 Create NuGet package
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
          
    - name: 📋 List generated packages
      run: ls -la ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: 🚀 Publish package to NuGet
      run: |
        echo "🚀 Publishing as authorized user: ${{ github.actor }}"
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --skip-duplicate
          
    - name: 📸 Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        
    - name: �️ Create Git Tag
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        echo "✅ Created and pushed tag: v$VERSION"
        
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## � Release ${{ steps.version.outputs.VERSION }}
          
          ### 📦 NuGet Package
          - **Package**: [Fengb3.EasyCodeBuilder](https://www.nuget.org/packages/Fengb3.EasyCodeBuilder/)
          - **Version**: ${{ steps.version.outputs.VERSION }}
          
          ### 📥 Installation
          ```bash
          dotnet add package Fengb3.EasyCodeBuilder --version ${{ steps.version.outputs.VERSION }}
          ```
          
          ### 🔗 Links
          - [NuGet Package](https://www.nuget.org/packages/Fengb3.EasyCodeBuilder/${{ steps.version.outputs.VERSION }})
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          ---
          *This release was automatically generated by GitHub Actions* 🤖
        files: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 